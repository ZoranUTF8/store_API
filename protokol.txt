1: create express server and test connection to a route (postman,browser)

2:create a db connection folder with db connecition file. mongo atlas ?
2.1: import mongoose
2.2: connect to db with function and export it.
2.3: import dbconnect function in main .js file and use it in start() to connect to db, print error if not connecting.
2.4: test connection

3: set up router,controllers and than test
3.1: Create controllers and create the logic than export
3.2: create route handler for specific route and import controllers.
3.3: add specific controller function to specific route
3.4: export router
3.5: import router in main .js
3.6: inside main.js add router handler to app.use("/api/v1/products",productsRouter);
3.7: test working routing (postman, browser)

4: set up postman collection for testing

5: use express-async-error package 
5.1: // ASYNC ERRORS
require("express-async-errors");
///////////////
5.2: test it by Throwing an error inside the route in the controller logic
const getAllProductsStatic = async (req, res) => {
    throw new Error("testing async error handler")
    res.status(200).json({
        msg: "products testing route"
    })
}

6: setting up the model/models
6.1: create models folder
6.2: create specific model name.js
6.3: add model logic (schema)
6.4: export the schema


7: set up the controller route logic
- with the requered db crud operations
7.1: ex: 
    const products = await Product.find(searchQuery); // get all products
7.2: use regex for specific name search 
ex: if (name) { // use regex to search names containing the specified charatcters
        searchQuery.name = {
            $regex: name,
            $options: "i"
        };
    }
7.3: use .sort for sroting results that are returned
ex: const products = await Product.find({}).sort("name price")
("name") -alphabetical order
("-name") -opposite order
everything else the same way we sort
7.4 use .select( ) for specific fields
ex:  if (fields) {
        const fieldsList = fields.split(",").join(" ")
        result.select(fieldsList);
    }
7.5 limit how many items we want back
ex: const products = await Product.find({}).limit(2)








